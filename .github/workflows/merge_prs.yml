name: Pull Request Details
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  print_details:
    runs-on: ubuntu-latest
    steps:
      - name: Print PR Details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Pull Request Details:"
          echo "---------------------"
          echo "Number: ${{ github.event.pull_request.number }}"
          echo "Title: ${{ github.event.pull_request.title }}"
          echo "Description: ${{ github.event.pull_request.body }}"
          echo "Author: ${{ github.event.pull_request.user.login }}"
          echo "URL: ${{ github.event.pull_request.html_url }}"
          echo "Branch Name : ${{ github.event.pull_request.head.ref }}"
          echo "---------------------"
          
  count_prs:
    runs-on: ubuntu-latest
    needs: print_details
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Count PRs
      run: |
        pr_count=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls" | jq length)
        echo "Number of PRs: $pr_count"
        
  list_prs:
    runs-on: ubuntu-latest
    needs: count_prs
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: List PRs
      run: |
        PRS=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls" | jq -r '.[] | {number: .number, branch: .head.ref}' | jq -s 'sort_by(.number)[] | .branch')
        echo "PR Names:"
        echo "$PRS"
        
  print_first_pr:
    runs-on: ubuntu-latest
    needs: list_prs
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name:  pr_name
      id: pr_branch_name
      run: |
        pr_to_merge=$(curl -s "https://api.github.com/repos/gkathiravan/merge_queue_project/pulls" | jq -r '[.[] | {number: .number, branch: .head.ref}] | sort_by(.number) | .[1] | .branch')
        echo "PR Name:"
        echo "$pr_to_merge"
        
  pr-approval-check:
    runs-on: ubuntu-latest
    steps:
      - name: checking approvals
        run: |
          PR_NAME="${{ steps.print_first_pr.outputs.pr_to_merge }}"
          echo "$PR_NAME"
          APPROVALS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                       -H "Accept: application/vnd.github.v3+json" \
                       "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?head=$PR_NAME")

          # Check if at least one approval exists
          if [ "$(echo "$APPROVALS" | jq -r '.[] | select(.state=="APPROVED")')" ]; then
            echo "PR has at least one approval."
            exit 0
          else
            echo "PR does not have approval. Merging is not allowed."
            exit 1
          fi
